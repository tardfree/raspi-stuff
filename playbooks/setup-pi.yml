---
# Setup an everyday pi

# Pre-reqs:
# * Out of box, raspios (raspbian) pi WITH SSH enabled and user pi created with vaulted password

# Initial ansible connection test: (this assumes raspberrypi resolves in dns)
# ansible pi -m setup -e "ansible_password='{{vault_piuser_password}}' ansible_user=pi" --limit=raspberrypi
# (this is using group pi, so the ssh ansible_ssh_common_args are set)

# Provision:
# initially (out of box hostname=raspberrypi and its in dns, so override hostname you want to set)
# giving this the IP of the pi also means the reboot will succeed without the failure to reconnect
# if the original hostname stops resolving upon reboot (dhcp server updates dns to the set hostname)
# ansible-playbook setup-pi.yml --limit=raspberrypi -e pibasic_hostname=pi4 -e ansible_host=192.168.3.134

# for a gui install add: -e pibasic_gpumem=256 -e pibasic_audio=true
# ansible-playbook setup-pi.yml --limit=raspberrypi -e pibasic_hostname=pi400 -e ansible_host=192.168.3.142 -e pibasic_gpumem=256 -e pibasic_audio=true

# Then afterwards hostvars file overides hostname/gpumem
# ansible-playbook setup-pi.yml --limit=pi4

- hosts: pi
  remote_user: pi
  become: yes
  vars:
    ansible_password: "{{ vault_piuser_password }}" #was raspberry bullseye and on it's no longer defaulted

  tasks:
    - import_role:
        name: pi-basic
      vars:
        pibasic_nas_mount: true

    - import_role:
        name: pi-trimssd

#    - import_role:
#        name: pi-eink
